/* tslint:disable */
/* eslint-disable */
/**
 * Callchimp Public API
 * ## Introductionüëã Introducing OpenAPI spec for doing almost anything in [callchimp.ai](https://callchimp.ai). CallChimp is a Gen AI Call Center Enhancing telecommunication with GPT-driven bulk calling. It is scalable, user-friendly, and customizable. Optimized for seamless integration and usability. ## API Categoriesüìã The APIs are divided in 7 categories listed below:   - Campaigns   - Supervisors   - Lists   - Subscribers   - Calls   - Phone Numbers   - Webhooks  ## API Operations‚úÖ ### Campaign Operations    - List all Campaigns   - Create a Campaign   - Get Campaign by Id   - Delete Campaign by Id   - Update Campaign by Id   - Add Supervisors to Campaign by Id   - Remove Supervisors from Campaign by Id   - Upload audio file to Campaign by Id  ### Supervisor Operations    - List all Supervisors   - Create a Supervisor   - Get Supervisor by Id   - Delete Supervisor by Id   - Update Supervisor by Id   - Send OTP to Campaign by Id   - Verify Supervisor OTP by Id  ### List Operations    - List all Lists   - Create a List   - Get List by Id   - Delete List by Id   - Update List by Id  ### Subscriber Operations    - List all Subscribers   - Create one or more Subscriber(s)   - Get Subscriber by Id   - Delete Subscriber by Id   - Update Subscriber by Id  ### Call Operations    - List outbound Calls   - Create a Call   - Get Call by Id   - List Inbound Calls   - Generate Call Reports  ### Phone Number Operations    - List Phone Numbers  ### Webhook Operations    - List all Webhooks   - Create a Webhook   - Get Webhook by Id   - Delete Webhook by Id   - Update Webhook by Id  ## Authenticationüîê CallChimp public API offers authentication with API Keys. All endpoints accepts a header named `x-api-key`. To get started follow the below steps:    1. Login to callchimp dashboard.   2. Click on your profile on the top-right corner.   3. Click on Settings.   4. On the settings page, click on `API Keys` from the left sidebar.   5. Click on `Add new` button, add an expiry date and click on `Add`.   6. An API Key will be generated, please save the key somewhere safe as it won\'t be shown again!   7. You can use the API Key directly here in this playground to test out the APIs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CallResponse
 */
export interface CallResponse {
    /**
     * 
     * @type {Date}
     * @memberof CallResponse
     */
    addedAt?: Date;
    /**
     * Campaign foreign key
     * @type {number}
     * @memberof CallResponse
     */
    campaign?: number;
    /**
     * 
     * @type {number}
     * @memberof CallResponse
     */
    dialCount?: number;
    /**
     * Status of how the call ended, read [more](https://www.voip-info.org/asterisk-variable-dialstatus/)
     * @type {string}
     * @memberof CallResponse
     */
    dialStatus?: string;
    /**
     * How the call is disposed, as defined in business logic
     * @type {string}
     * @memberof CallResponse
     */
    disposition?: string;
    /**
     * 
     * @type {number}
     * @memberof CallResponse
     */
    duration?: number;
    /**
     * SIP code of call hangup, read [more](https://www.voip-info.org/asterisk-variable-hangupcause/)
     * @type {string}
     * @memberof CallResponse
     */
    hangupCause?: string;
    /**
     * 
     * @type {number}
     * @memberof CallResponse
     */
    id?: number;
    /**
     * Marks the call answered
     * @type {boolean}
     * @memberof CallResponse
     */
    isAnswered?: boolean;
    /**
     * Lead foreign key
     * @type {number}
     * @memberof CallResponse
     */
    lead?: number;
    /**
     * 
     * @type {number}
     * @memberof CallResponse
     */
    organization?: number;
    /**
     * 
     * @type {string}
     * @memberof CallResponse
     */
    recordingPath?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof CallResponse
     */
    startedAt?: Date;
}

/**
 * Check if a given object implements the CallResponse interface.
 */
export function instanceOfCallResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CallResponseFromJSON(json: any): CallResponse {
    return CallResponseFromJSONTyped(json, false);
}

export function CallResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): CallResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'addedAt': !exists(json, 'added_at') ? undefined : (new Date(json['added_at'])),
        'campaign': !exists(json, 'campaign') ? undefined : json['campaign'],
        'dialCount': !exists(json, 'dial_count') ? undefined : json['dial_count'],
        'dialStatus': !exists(json, 'dial_status') ? undefined : json['dial_status'],
        'disposition': !exists(json, 'disposition') ? undefined : json['disposition'],
        'duration': !exists(json, 'duration') ? undefined : json['duration'],
        'hangupCause': !exists(json, 'hangup_cause') ? undefined : json['hangup_cause'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'isAnswered': !exists(json, 'is_answered') ? undefined : json['is_answered'],
        'lead': !exists(json, 'lead') ? undefined : json['lead'],
        'organization': !exists(json, 'organization') ? undefined : json['organization'],
        'recordingPath': !exists(json, 'recording_path') ? undefined : json['recording_path'],
        'startedAt': !exists(json, 'started_at') ? undefined : (new Date(json['started_at'])),
    };
}

export function CallResponseToJSON(value?: CallResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'added_at': value.addedAt === undefined ? undefined : (value.addedAt.toISOString()),
        'campaign': value.campaign,
        'dial_count': value.dialCount,
        'dial_status': value.dialStatus,
        'disposition': value.disposition,
        'duration': value.duration,
        'hangup_cause': value.hangupCause,
        'id': value.id,
        'is_answered': value.isAnswered,
        'lead': value.lead,
        'organization': value.organization,
        'recording_path': value.recordingPath,
        'started_at': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
    };
}

